@page "/Admin"
@using AuthWithAdmin.Client.Components
@using AuthWithAdmin.Shared.ClientModels
@using System.Net.Http.Json
@using AuthWithAdmin.Client.ClientHelpers
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.Extensions.Logging
@using System.Net.Http.Headers

@attribute [Authorize(Roles = "User")]
@inject HttpClient Http
@inject ILogger<Admin> Logger
@inject IJSRuntime JSRuntime
@inject PopupService PopupService

<div class="chat-editor-container">
    <div class="admin-header">
        <h1>ניהול תוכן הצ'אט</h1>
        <p class="text-muted">נהל קטגוריות ושאלות בצ'אט</p>
    </div>

    <div class="row g-4">
       

        <div class="col-md-12">
            <!-- Main content area -->
            <div class="card">
                <div class="card-header">
                    <div class="tableCardHeader flex-column flex-sm-row">
                        <h5 class="col-sm-2">@GetTabTitle()</h5>
                       <div class="dropdown col-sm-8">
                            <div class="header-button-wrapper admin-language-wrapper">
                                <span class="dropdown-toggle admin-language-toggle"
                                      style="color:#55595C; cursor: pointer;"
                                      data-bs-toggle="dropdown" aria-expanded="false">
                                    <i class="fa-solid fa-globe"></i>
                                    @GetLanguage
                                </span>

                                <ul class="dropdown-menu dropdown-menu-center text-center p-2" style="min-width: 100%;">
                                    <li>
                                        <button class="dropdown-item @(GetLanguage == "עברית" ? "active fw-bold" : "")"
                                                @onclick="@(() => SetLanguage("עברית"))">
                                            עברית
                                        </button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item @(GetLanguage == "English" ? "active fw-bold" : "")"
                                                @onclick="@(() => SetLanguage("English"))">
                                            English
                                        </button>
                                    </li>
                                    <li>
                                        <button class="dropdown-item @(GetLanguage == "Arabic" ? "active fw-bold" : "")"
                                                @onclick="@(() => SetLanguage("Arabic"))">
                                            Arabic
                                        </button>
                                    </li>
                                </ul>
                            </div>
                        </div>
                    
                        <div>
                            @if (activeTab == "categories")
                            {
                                <button class="button" style="min-width:10rem;" @onclick="ShowAddCategoryModal">
                                    <i class="fas fa-plus" style="margin-left: 0.5rem;"></i>הוספת קטגוריה
                                </button>
                            }
                            else if (activeTab == "questions" && selectedCategoryId > 0)
                            {
                                <div>                                
                                    <button class="button btn-secondary" style="min-width:10rem;" @onclick="@(() => activeTab = "categories")">
                                    חזרה לקטגוריות
                                    </button>
                                    <button class="button" style="min-width:10rem; margin-top:0.5rem;" @onclick="ShowAddQuestionModal">
                                        <i class="fas fa-plus" style="margin-left: 0.5rem;"></i>הוספת שאלה
                                    </button>
                                </div>

                            }
                        </div>
                    </div>
                </div>
                <div class="card-body">
                    @if (isLoading)
                    {
                        <div class="text-center p-4">
                            <div class="spinner-border" role="status">
                                <span class="visually-hidden">טוען...</span>
                            </div>
                            <div class="mt-2">טוען נתונים...</div>
                        </div>
                    }
                    else
                    {
                        @if (activeTab == "categories")
                        {
                            <CategoriesEditor Categories="categories" 
                            currentLanguage="@currentLanguage"
                            OnEditCategory="EditCategory"
                            OnDeleteCategory="DeleteCategory"
                            OnSelectCategory="SelectCategoryAndShowQuestions" />
                        }
                        else if (activeTab == "questions")
                        {
                            @if (selectedCategoryId > 0)
                            {
                                <QuestionsEditor CategoryId="selectedCategoryId"
                                                 currentLanguage="@currentLanguage"
                                Questions="GetQuestionsForCategory(selectedCategoryId)"
                                OnEditQuestion="EditQuestion"
                                OnDeleteQuestion="DeleteQuestion" />
                            }
                            else
                            {
                                <div class="alert alert-info">
                                    <i class="fas fa-info-circle me-2"></i>
                                    כדי שהשאלות יופיעו, צריך לבחור קטגוריה
                                </div>
                            }
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>





@if (showCategoryModal)
                    {
                        <div class="modal fade show" style="display: block;" tabindex="-1">
                            <div class="modal-dialog">
                                <div class="modal-content" id="adminEditCategoryModal">
                                    <div class="modal-header">
                                        <h5 class="modal-title col-11">@(editingCategory.ID > 0 ? "עריכת קטגוריה" : "הוספת קטגוריה")</h5>
                                        <button type="button" class="fa-solid fa-xmark" @onclick="CloseCategoryModal"></button>
                                    </div>
                                    <div class="modal-body" >
                                        <EditForm EditContext="categoryEditContext" OnValidSubmit="SaveCategory">
                                            <DataAnnotationsValidator />
                                            <ValidationSummary />

                                            <div class="mb-4">
                                                <div class="category-language-tabs">
                                                    <div class="btn-group" role="group" style="margin-bottom:0.8em;">
                                                         <button type="button" class="btn @(editingLanguage == "Arabic" ? "btn-main" : "btn-outline-modal")"
                                                            @onclick="@(() => SwitchEditingLanguage("Arabic"))">
                                                                <span>AR</span>
                                                            </button>
                                                        <button type="button" class="btn @(editingLanguage == "English" ? "btn-main" : "btn-outline-modal")"
                                                            @onclick="@(() => SwitchEditingLanguage("English"))">
                                                                <span>EN</span>
                                                        </button>
                                                         <button type="button" class="btn @(editingLanguage == "עברית" ? "btn-main" : "btn-outline-modal")"
                                                             @onclick="@(() => SwitchEditingLanguage("עברית"))">
                                                                 <span>עב</span>
                                                         </button>
                                                      
                                                    </div>
                                                </div>
                                                <label class="form-label">שם הקטגוריה</label>

                                                @if (editingLanguage == "עברית")
                                                {
                                                    <InputText @bind-Value="editingCategory.categoryName" class="form-control" />
                                                }
                                                else if (editingLanguage == "English")
                                                {
                                                    <InputText @bind-Value="editingCategory.categoryNameEN" class="form-control" />
                                                }
                                                else if (editingLanguage == "Arabic")
                                                {
                                                    <InputText @bind-Value="editingCategory.categoryNameAR" class="form-control" />
                                                }
                                            </div>

                                            <div class="mb-4">
                                                <label class="form-label">תמונת קטגוריה</label>
                                                <div class="d-flex align-items-center gap-3">
                                                    @if (!string.IsNullOrEmpty(categoryImageUrl))
                                                    {
                                                        <div class="category-image-preview">
                                                            <img src="@categoryImageUrl" alt="Category preview" />
                                                            <button type="button" class="btn btn-sm btn-danger" @onclick="RemoveCategoryImage">
                                                                <i class="fas fa-times"></i>
                                                            </button>
                                                        </div>
                                                    }
                                                    <InputFile OnChange="OnCategoryImageSelected" class="form-control" accept="image/png" />
                                                </div>
                                                @if (!string.IsNullOrEmpty(tempCategoryImagePath))
                                                {
                                                    <div class="alert alert-success mt-2">
                                                        <i class="fas fa-check-circle"></i>
                                                        <small>תמונה חדשה נבחרה (תישמר בלחיצה על שמירה)</small>
                                                    </div>
                                                }
                                            </div>

                                            <div class="modal-footer">
                                                <button type="button" class="button btn-secondary" @onclick="CloseCategoryModal">ביטול</button>
                                                <button type="submit" class="button" disabled="@(!hasChanges || isLoading)">
                                                    @if (isLoading)
                                                    {
                                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                                    }
                                                    שמירה
                                                </button>
                                            </div>
                                        </EditForm>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
      
   


@if (showQuestionModal)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog modal-lg">
            <div class="modal-content" id="adminEditQuestionModal" style="max-width: 60rem !important; top:3rem !important;">
                <EditForm EditContext="questionEditContext" OnValidSubmit="SaveQuestion">
                    <DataAnnotationsValidator />
                    
                    <div class="modal-header">
                        <h5 class="modal-title col-11">@(editingQuestion.Id > 0 ? "עריכת שאלה" : "הוספת שאלה")</h5>
                        <button type="button" class="fa-solid fa-xmark" @onclick="CloseQuestionModal"></button>
                    </div>
                    
                    <div class="modal-body" style="height:calc(65vh - 60px); overflow:auto;">
                        <ValidationSummary />

                        <!-- Language tabs -->
                        <div class="category-language-tabs mb-4">
                            <div class="btn-group" role="group">
                               <button type="button" class="btn @(editingLanguage == "Arabic" ? "btn-main" : "btn-outline-modal")"
                                        @onclick="@(() => SwitchEditingLanguage("Arabic"))">
                                    <span>AR</span>
                                </button>
                                <button type="button" class="btn @(editingLanguage == "English" ? "btn-main" : "btn-outline-modal")"
                                        @onclick="@(() => SwitchEditingLanguage("English"))">
                                    <span>EN</span>
                                </button>
                                 <button type="button" class="btn @(editingLanguage == "עברית" ? "btn-main" : "btn-outline-modal")"
                                        @onclick="@(() => SwitchEditingLanguage("עברית"))">
                                    <span>עב</span>
                                </button>
                                
                            </div>
                        </div>

                        <!-- Question field based on language -->
                        <div class="mb-4">
                            <label class="form-label">טקסט השאלה</label>
                            @if (editingLanguage == "עברית")
                            {
                                <InputTextArea @bind-Value="editingQuestion.questionText" class="form-control" />
                            }
                            else if (editingLanguage == "English")
                            {
                                <InputTextArea @bind-Value="editingQuestion.questionTextEN" class="form-control" />
                            }
                            else if (editingLanguage == "Arabic")
                            {
                                <InputTextArea @bind-Value="editingQuestion.questionTextAR" class="form-control" />
                            }
                        </div>

                        <!-- Answer field based on language -->
                        <div class="mb-4">
                            <label class="form-label">טקסט התשובה</label>
                            @if (editingLanguage == "עברית")
                            {
                                <InputTextArea @bind-Value="editingQuestion.answerText" class="form-control" rows="5" />
                            }
                            else if (editingLanguage == "English")
                            {
                                <InputTextArea @bind-Value="editingQuestion.answerTextEN" class="form-control" rows="5" />
                            }
                            else if (editingLanguage == "Arabic")
                            {
                                <InputTextArea @bind-Value="editingQuestion.answerTextAR" class="form-control" rows="5" />
                            }
                        </div>

                        <!-- Next Steps field based on language -->
                        <div class="mb-4">
                            <label class="form-label">מה נעשה בפועל (אופציונלי)</label>
                            @if (editingLanguage == "עברית")
                            {
                                <InputTextArea @bind-Value="editingQuestion.nextStep" class="form-control" rows="5" />
                            }
                            else if (editingLanguage == "English")
                            {
                                <InputTextArea @bind-Value="editingQuestion.nextStepEN" class="form-control" rows="5" />
                            }
                            else if (editingLanguage == "Arabic")
                            {
                                <InputTextArea @bind-Value="editingQuestion.nextStepAR" class="form-control" rows="5" />
                            }
                        </div>

                        <!-- PDF upload - language specific -->
                        <div class="mb-4">
                            <label class="form-label">מסמך PDF (אופציונלי)</label>
                            <div class="pdf-upload-container">
                                @{
                                    string currentPdfPath = editingLanguage switch
                                    {
                                        "English" => editingQuestion.pdfPathEN,
                                        "Arabic" => editingQuestion.pdfPathAR,
                                        _ => editingQuestion.pdfPath
                                    };
                                }

                                @if (!string.IsNullOrEmpty(currentPdfPath))
                                {
                                    <div class="existing-pdf">
                                        <i class="fas fa-file-pdf"></i>
                                        <span>@Path.GetFileName(currentPdfPath)</span>
                                        <br />
                                        <div class="pdf-actions">
                                            <button type="button" class="btn btn-sm btn-danger" @onclick="() => RemovePdfForLanguage(editingLanguage)">
                                                <i class="fas fa-times"></i>
                                            </button>
                                            <button type="button" class="btn btn-sm btn-preview" @onclick="() => ViewPdfForLanguage(editingLanguage)">
                                                <i class="fas fa-eye"></i>
                                            </button>
                                        </div>
                                    </div>
                                }
                                <InputFile OnChange="OnPdfSelected" class="form-control" accept=".pdf" />
                                @if (!string.IsNullOrEmpty(tempPdfPath))
                                {
                                    <div class="temp-pdf-info">
                                        <i class="fas fa-check-circle text-success"></i>
                                        <small>נבחר PDF חדש: @tempPdfPath (יישמר בלחיצה על שמירה)</small>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <div class="modal-footer">
                        <button type="button" class="button btn-secondary" @onclick="CloseQuestionModal">ביטול</button>
                        <button type="submit" class="button" disabled="@(!hasChanges || isLoading)">
                            @if (isLoading)
                            {
                                <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                            }
                            שמירה
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>
}<ConfirmationPopup @ref="unsavedChangesConfirmation"
Title="שינויים שלא נשמרו"
ConfirmText="יציאה"
CancelText="חזרה לעריכה"
ConfirmButtonClass="btn-main"
OnConfirm="ConfirmDiscardChanges">
    <p>יש לך שינויים שלא נשמרו. האם ברצונך לצאת ללא שמירה?</p>
</ConfirmationPopup>

@code {
    private string currentLanguage = "עברית";
    public string GetLanguage => currentLanguage;

    public void SetLanguage(string language)
    {
        Console.WriteLine("השפה השתנתה!");
        currentLanguage = language;
        Console.WriteLine($"The language is {currentLanguage}");
        StateHasChanged(); 
    }


    private string FormatMessageWithLineBreaks(string content)
    {
        if (string.IsNullOrEmpty(content))
            return content;

        // Replace all types of line breaks with <br> tags
        // This handles both Windows (\r\n) and Unix (\n) style line breaks
        return content.Replace("\r\n", "<br>").Replace("\n", "<br>");
    }
    private string tempPdfLanguage;

    // Methods for language-specific PDF handling
    private async Task ViewPdfForLanguage(string language)
    {
        string pdfPath = language switch
        {
            "English" => editingQuestion.pdfPathEN,
            "Arabic" => editingQuestion.pdfPathAR,
            _ => editingQuestion.pdfPath
        };

        if (!string.IsNullOrEmpty(pdfPath))
        {
            // Open the PDF in a new tab/window
            await JSRuntime.InvokeVoidAsync("window.open", pdfPath, "_blank");
        }
    }

    private async Task RemovePdfForLanguage(string language)
    {
        string pdfPath = null;

        switch (language)
        {
            case "English":
                pdfPath = editingQuestion.pdfPathEN;
                editingQuestion.pdfPathEN = null;
                break;
            case "Arabic":
                pdfPath = editingQuestion.pdfPathAR;
                editingQuestion.pdfPathAR = null;
                break;
            default: // Hebrew
                pdfPath = editingQuestion.pdfPath;
                editingQuestion.pdfPath = null;
                break;
        }

        if (!string.IsNullOrEmpty(pdfPath))
        {
            try
            {
                // Delete the file
                var response = await Http.PostAsJsonAsync("api/Media/deleteImages",
                    new List<string> { pdfPath });

                if (!response.IsSuccessStatusCode)
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Could not remove PDF: {error}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error removing PDF");
            }

            hasChanges = true;
            StateHasChanged();
        }
    }


    // Navigation state
    private string activeTab = "categories";
    private int selectedCategoryId = 0;

    // Loading state
    private bool isLoading = false;

    // Data collections
    private List<Categories> categories = new List<Categories>();
    private Dictionary<int, List<Questions>> questionsByCategory = new Dictionary<int, List<Questions>>();
    private ChatDataModel? chatData;

    // Modal state
    private bool showCategoryModal = false;
    private bool showQuestionModal = false;
    private ConfirmationPopup unsavedChangesConfirmation;
    private Action pendingAction;
    private bool hasUnsavedChanges = false;


    // Editing objects
    private Categories editingCategory = new Categories();
    private Questions editingQuestion = new Questions();
    private Categories originalCategory = new Categories();
    private Questions originalQuestion = new Questions();
    private string editingLanguage = "עברית";

    private bool hasChanges = false;


    // Image / PDF upload state
    private string categoryImageUrl = string.Empty;
    private string? pdfFilePath;
    private long maxFileSize = 4194304;
    string? errorMsg;
    private IBrowserFile pdfFile;
    private string tempPdfPath;
    private string tempCategoryImagePath;


    #region Image Upload Methods / Helpers
    private async Task RemoveCategoryImage()
    {
        if (!string.IsNullOrEmpty(tempCategoryImagePath))
        {
            // Delete the temporary file
            await Http.PostAsJsonAsync("api/Media/deleteImages",
                new List<string> { "uploadTemp/" + tempCategoryImagePath });

            tempCategoryImagePath = null;
            categoryImageUrl = string.Empty;
        }
        else if (!string.IsNullOrEmpty(editingCategory.image))
        {
            // If removing an existing image, delete the file
            await Http.PostAsJsonAsync("api/Media/deleteImages",
                new List<string> { editingCategory.image });

            editingCategory.image = null;
        }


        hasChanges = true;

        StateHasChanged();
    }

    #endregion

    #region PDF file uploading 
    private string GetPdfFileName(string path)
    {
        if (string.IsNullOrEmpty(path)) return "None";
        return Path.GetFileName(path);
    }

    private async Task ViewPdf()
    {
        if (!string.IsNullOrEmpty(editingQuestion.pdfPath))
        {
            // Open the PDF in a new tab/window
            await JSRuntime.InvokeVoidAsync("window.open", editingQuestion.pdfPath, "_blank");
        }
    }
    private async Task RemovePdf()
    {
        if (!string.IsNullOrEmpty(editingQuestion.pdfPath))
        {
            try
            {
                // Pass the path exactly as stored in pdfPath
                var response = await Http.PostAsJsonAsync("api/Media/deleteImages",
                    new List<string> { editingQuestion.pdfPath });

                if (response.IsSuccessStatusCode)
                {
                    editingQuestion.pdfPath = null;
                }
                else
                {
                    var error = await response.Content.ReadAsStringAsync();
                    await JSRuntime.InvokeVoidAsync("alert", $"Could not remove PDF: {error}");
                }
            }
            catch (Exception ex)
            {
                Logger.LogError(ex, "Error removing PDF");
            }
            hasChanges = true;
            StateHasChanged();
        }
    }// Methods for language-specific PDF handling


    private async Task OnPdfSelected(InputFileChangeEventArgs e)
    {
        pdfFile = e.File;
        if (pdfFile.Size <= maxFileSize)
        {
            var buffer = new byte[pdfFile.Size];
            await pdfFile.OpenReadStream(maxFileSize).ReadAsync(buffer);
            var pdfBase64 = Convert.ToBase64String(buffer);

            // Store current language with the temp file for later reference
            tempPdfLanguage = editingLanguage;

            // Upload to temporary location
            var saveResponse = await Http.PostAsJsonAsync("api/Media/uploadPdfTemp", pdfBase64);
            if (saveResponse.IsSuccessStatusCode)
            {
                string fileName = await saveResponse.Content.ReadAsStringAsync();
                tempPdfPath = fileName; // Just store the filename, not the full path

                // Update UI to show the PDF is selected but not saved yet
                await JSRuntime.InvokeVoidAsync("console.log", $"PDF uploaded to temp: {fileName} for language: {editingLanguage}");
            }
            else
            {
                var errorMessage = await saveResponse.Content.ReadAsStringAsync();
                await JSRuntime.InvokeVoidAsync("alert", $"PDF upload failed: {errorMessage}");
            }
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("alert", "PDF file is too large. Maximum size is 10MB.");
        }
        hasChanges = true;
        StateHasChanged();
    }

    #endregion
    #region all code

    protected override async Task OnInitializedAsync()
    {
        await LoadData();
    }
    private async Task LoadData()
    {
        try
        {
            Logger.LogInformation("Loading all chat data...");
            SetLoadingState(true);

            var response = await Http.GetAsync("api/Chat/GetAllData");
            response.EnsureSuccessStatusCode();
            chatData = await response.Content.ReadFromJsonAsync<ChatDataModel>();
            categories = chatData.Categories;
            questionsByCategory = chatData.Questions;
            Logger.LogInformation($"Successfully loaded {chatData.States.Count} states, " +
                                  $"{chatData.Categories.Count} categories, " +
                                  $"questions for {chatData.Questions.Count} categories");
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error loading chat data: {ex.Message}");

        }
        finally
        {
            SetLoadingState(false);
        }
    }

    private void SetLoadingState(bool loading)
    {
        isLoading = loading;
        StateHasChanged();
    }

    // Navigation methods
    private void SelectCategoriesTab() => SetActiveTab("categories");
    private void SelectQuestionsTab() => SetActiveTab("questions");

    private void SelectCategoryAndShowQuestions(int id)
    {
        selectedCategoryId = id;
        SetActiveTab("questions");
    }

    private void SetActiveTab(string tab)
    {
        activeTab = tab;
        if (tab != "questions")
        {
            selectedCategoryId = 0;
        }
    }

    private string GetTabTitle()
    {
        switch (activeTab)
        {
            case "categories":
                return "ניהול קטגוריות";
            case "questions":
                var category = categories.FirstOrDefault(c => c.ID == selectedCategoryId);
                return selectedCategoryId > 0 
                    ? $"שאלות בנושא  {category?.categoryName ?? "קטגוריה נבחרת"}" 
                    : "כדאי לבחור קטגוריה";
            default:
                return string.Empty;
        }
    }

    private List<Questions> GetQuestionsForCategory(int categoryId)
    {
        if (questionsByCategory.TryGetValue(categoryId, out var questions))
        {
            return questions;
        }
        return new List<Questions>();
    }

    // Modal control methods
    private async Task CloseCategoryModal()
    {
        // Check if there are unsaved changes
        if (hasChanges)
        {
            // Store the actual close action for later
            pendingAction = async () =>
            {
                // Original close logic
                if (!string.IsNullOrEmpty(tempCategoryImagePath))
                {
                    // Call to delete the temporary file
                    var deleteResponse = await Http.PostAsJsonAsync("api/Media/deleteImages",
                        new List<string> { "uploadTemp/" + tempCategoryImagePath });

                    tempCategoryImagePath = null;
                    categoryImageUrl = string.Empty;
                }

                showCategoryModal = false;
                StateHasChanged();
            };

            // Show confirmation instead of closing directly
            unsavedChangesConfirmation.Show();
        }
        else
        {
            // Clean up files and EditContext
            if (!string.IsNullOrEmpty(tempCategoryImagePath))
            {
                var deleteResponse = await Http.PostAsJsonAsync("api/Media/deleteImages",
                    new List<string> { "uploadTemp/" + tempCategoryImagePath });

                tempCategoryImagePath = null;
                categoryImageUrl = string.Empty;
            }

            if (categoryEditContext != null)
            {
                categoryEditContext.OnFieldChanged -= CategoryFieldChanged;
                categoryEditContext = null;
            }

            showCategoryModal = false;

        }
    }



    // Add a method to handle modal closing
   private async Task CloseQuestionModal()
{
    // Check if there are actual changes between originalQuestion and editingQuestion
    bool hasActualChanges = 
        editingQuestion.questionText != originalQuestion.questionText ||
        editingQuestion.questionTextEN != originalQuestion.questionTextEN ||
        editingQuestion.questionTextAR != originalQuestion.questionTextAR ||
        editingQuestion.answerText != originalQuestion.answerText ||
        editingQuestion.answerTextEN != originalQuestion.answerTextEN || 
        editingQuestion.answerTextAR != originalQuestion.answerTextAR ||
        editingQuestion.nextStep != originalQuestion.nextStep ||
        editingQuestion.nextStepEN != originalQuestion.nextStepEN ||
        editingQuestion.nextStepAR != originalQuestion.nextStepAR ||
        !string.IsNullOrEmpty(tempPdfPath);
    
    // Only show confirmation if actual changes exist
    if (hasActualChanges)
    {
        // Store the actual close action for later
        pendingAction = async () =>
        {
            // Original close logic
            if (!string.IsNullOrEmpty(tempPdfPath))
            {
                // Call to delete the temporary file
                var deleteResponse = await Http.PostAsJsonAsync("api/Media/deleteImages",
                    new List<string> { "pdfTemp/" + tempPdfPath });

                tempPdfPath = null;
            }

            showQuestionModal = false;
            StateHasChanged();
        };

        // Show confirmation instead of closing directly
        unsavedChangesConfirmation.Show();
    }
    else
    {
        // Clean up files and EditContext
        if (!string.IsNullOrEmpty(tempPdfPath))
        {
            var deleteResponse = await Http.PostAsJsonAsync("api/Media/deleteImages",
                new List<string> { "pdfTemp/" + tempPdfPath });

            tempPdfPath = null;
        }

        if (questionEditContext != null)
        {
            questionEditContext.OnFieldChanged -= QuestionFieldChanged;
            questionEditContext = null;
        }

        showQuestionModal = false;
    }
}


    // Category operations
    private void ShowAddCategoryModal()
    {
        editingCategory = new Categories();
        originalCategory = new Categories();

        // Set up fresh EditContext
        categoryEditContext = new EditContext(editingCategory);
        categoryEditContext.OnFieldChanged += CategoryFieldChanged;

        tempCategoryImagePath = null;
        categoryImageUrl = string.Empty;
        hasChanges = false;
        showCategoryModal = true;
    }



    private async Task ConfirmDiscardChanges()
    {
        if (pendingAction != null)
        {
            pendingAction.Invoke();
            pendingAction = null;
        }
    }

    private void EditCategory(Categories category)
    {

        Console.WriteLine("Calling Edit Category..");
        // Store the original values for comparison
        originalCategory = new Categories
            {
                ID = category.ID,
                categoryName = category.categoryName,
                categoryNameEN = category.categoryNameEN,
                categoryNameAR = category.categoryNameAR,
                image = category.image
            };
        editingCategory = new Categories
        {
                ID = category.ID,
                categoryName = category.categoryName,
                categoryNameEN = category.categoryNameEN,
                categoryNameAR = category.categoryNameAR,
                image = category.image
            };
        editingLanguage = currentLanguage;

        // Set up EditContext with automatic change tracking
        categoryEditContext = new EditContext(editingCategory);
        categoryEditContext.OnFieldChanged += CategoryFieldChanged;

        // Reset temp variables
        tempCategoryImagePath = null;
        categoryImageUrl = !string.IsNullOrEmpty(category.image) ? category.image : string.Empty;

        hasChanges = false;
        showCategoryModal = true;
    }

    private void SwitchEditingLanguage(string language)
    {
        editingLanguage = language;
        StateHasChanged();
    }

    private void CategoryFieldChanged(object sender, FieldChangedEventArgs args)
    {
        // This is called when any form field changes
        hasChanges = true;
        StateHasChanged();
    }


    //TRY OF IMPLEMENTATION OF CHANGES IN FORMS.
    // Add these to your component
    private EditContext categoryEditContext;
    private EditContext questionEditContext;

private string GetConfirmationMessage()
{
    return currentLanguage switch
    {
        "English" => $"השם ישתנה מ-\"{originalCategory.categoryNameEN}\" ל-\"{editingCategory.categoryNameEN}\". להמשיך?",
        "Arabic" => $"השם ישתנה מ-\"{originalCategory.categoryNameAR}\" ל-\"{editingCategory.categoryNameAR}\". להמשיך?",
        _ => $"השם ישתנה מ-\"{originalCategory.categoryName}\" ל-\"{editingCategory.categoryName}\". להמשיך?" // Default Hebrew
    };
}




    private async Task SaveCategory()
    {
        try
        {
          
            isLoading = true;

            // If we have a temporary image, move it to permanent location
            if (!string.IsNullOrEmpty(tempCategoryImagePath))
            {
                var moveResponse = await Http.PostAsJsonAsync("api/Media/moveFiles",
                    new List<string> { tempCategoryImagePath });

                if (moveResponse.IsSuccessStatusCode)
                {
                    // Now update the category with the permanent path
                    editingCategory.image = "uploadedFiles/" + tempCategoryImagePath;
                }
                else
                {
                    var error = await moveResponse.Content.ReadAsStringAsync();
                    Logger.LogError($"Failed to move image: {error}");
                }
            }

            if (editingCategory.ID > 0)
            {
                // Update existing category
                var response = await Http.PutAsJsonAsync($"api/ChatAdmin/Category/{editingCategory.ID}", editingCategory);
                if (response.IsSuccessStatusCode)
                {
                    var updatedCategory = categories.FirstOrDefault(c => c.ID == editingCategory.ID);
                    if (updatedCategory != null)
                    {
                        updatedCategory.ID = editingCategory.ID;
                        updatedCategory.categoryName = editingCategory.categoryName;
                        updatedCategory.categoryNameAR = editingCategory.categoryNameAR;
                        updatedCategory.categoryNameEN = editingCategory.categoryNameEN;
                        updatedCategory.image = editingCategory.image;
                    }
                }
                else
                {
                    Logger.LogError($"Failed to update category: {response.StatusCode}");
                }
            }
            else
            {
                // Create new category
                var response = await Http.PostAsJsonAsync("api/ChatAdmin/Category", editingCategory);
                if (response.IsSuccessStatusCode)
                {
                    var result = await response.Content.ReadFromJsonAsync<Categories>();
                    if (result != null)
                    {
                        categories.Add(result);
                    }
                }
                else
                {
                    Logger.LogError($"Failed to create category: {response.StatusCode}");
                }
            }

            // Clear temp variables
            tempCategoryImagePath = null;
            showCategoryModal = false;
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error saving category");
            // Show error message to user
            await PopupService.ConfirmAsync(
                "שגיאה בשמירה",
                $"אירעה שגיאה בעת שמירת הקטגוריה: {ex.Message}"
            );
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task DeleteCategory(int categoryId)
    {
        var category = categories.FirstOrDefault(c => c.ID == categoryId);
        if (category == null) return;

        isLoading = true;
        try
        {
            var response = await Http.DeleteAsync($"api/ChatAdmin/Category/{categoryId}");
            if (response.IsSuccessStatusCode)
            {
                categories.RemoveAll(c => c.ID == categoryId);
                questionsByCategory.Remove(categoryId);
            }
            else
            {
                Logger.LogError($"Failed to delete category: {response.StatusCode}");
                string errorMessage = await response.Content.ReadAsStringAsync();
                try {
                    await PopupService.ConfirmAsync(
                        "שגיאה במחיקת קטגוריה", 
                        $"לא ניתן למחוק את הקטגוריה. {errorMessage}"
                    );
                }
                catch {
                    await JSRuntime.InvokeVoidAsync("alert", $"לא ניתן למחוק את הקטגוריה. {errorMessage}");
                }
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting category");
            try {
                await PopupService.ConfirmAsync(
                    "שגיאה", 
                    "אירעה שגיאה בעת ניסיון למחוק את הקטגוריה. אנא נסה שוב מאוחר יותר."
                );
            }
            catch {
                await JSRuntime.InvokeVoidAsync("alert", "אירעה שגיאה בעת ניסיון למחוק את הקטגוריה. אנא נסה שוב מאוחר יותר.");
            }
        }
        finally
        {
            isLoading = false;
        }
    }




    private async Task OnCategoryImageSelected(InputFileChangeEventArgs e)
    {
        var imageFiles = e.GetMultipleFiles();
        foreach (var file in imageFiles)
        {
            if (file.Size <= maxFileSize)
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                var imageBase64 = Convert.ToBase64String(buffer);

                // Use the existing uploadTemp endpoint for temporary storage
                var saveResponse = await Http.PostAsJsonAsync("api/Media/uploadTemp", imageBase64);
                if (saveResponse.IsSuccessStatusCode)
                {
                    string resizeUrl = await saveResponse.Content.ReadAsStringAsync();
                    tempCategoryImagePath = resizeUrl; // Store just filename
                    categoryImageUrl = $"uploadTemp/{resizeUrl}"; // For display purposes



                    hasUnsavedChanges = true;
                    hasChanges = true;
                    StateHasChanged();

                }
                else
                {
                    var errorMessage = await saveResponse.Content.ReadAsStringAsync();
                    errorMsg = $"Image upload failed: {errorMessage}";
                }
            }
        }
    }


    private string GenerateAnswerFileInputId(Categories category)
    {
        return $"fileInput_{category.ID}";
    }

    private void ShowAddQuestionModal()
    {
        editingQuestion = new Questions { categoryId = selectedCategoryId };
        originalQuestion = new Questions { categoryId = selectedCategoryId };

        // Set up fresh EditContext
        questionEditContext = new EditContext(editingQuestion);
        questionEditContext.OnFieldChanged += QuestionFieldChanged;

        tempPdfPath = null;
        pdfFile = null;
        hasChanges = false;
        showQuestionModal = true;

    }

    private void EditQuestion(Questions question)
    {



        Console.WriteLine("Calling Edit Question...");

        originalQuestion = new Questions
            {
                Id = question.Id,
                questionText = question.questionText,
                questionTextEN = question.questionTextEN,
                questionTextAR = question.questionTextAR,
                answerText = question.answerText,
                answerTextAR = question.answerTextAR,
                answerTextEN = question.answerTextEN,
                nextStep = question.nextStep,
                nextStepAR = question.nextStepAR, 
                nextStepEN = question.nextStepEN,
                categoryId = question.categoryId,
                pdfPath = question.pdfPath,
                pdfPathEN = question.pdfPathEN,
                pdfPathAR = question.pdfPathAR
            };
        editingQuestion = new Questions
        {
                Id = question.Id,
                questionText = question.questionText,
                questionTextEN = question.questionTextEN,
                questionTextAR = question.questionTextAR,
                answerText = question.answerText,
                answerTextAR = question.answerTextAR,
                answerTextEN = question.answerTextEN,
                nextStep = question.nextStep,
                nextStepAR = question.nextStepAR,
                nextStepEN = question.nextStepEN,
                categoryId = question.categoryId,
                pdfPath = question.pdfPath,
                pdfPathEN = question.pdfPathEN,
                pdfPathAR = question.pdfPathAR
            };
        editingLanguage = currentLanguage;


        // Set up EditContext
        questionEditContext = new EditContext(editingQuestion);
        questionEditContext.OnFieldChanged += QuestionFieldChanged;
        showQuestionModal = true;
        tempPdfPath = null;
        pdfFile = null;
    }

    private void QuestionFieldChanged(object sender, FieldChangedEventArgs args)
    {
        // This is called when any form field changes
        hasChanges = true;
        StateHasChanged();
    }


private async Task SaveQuestion()
{
    try
    {
     

        isLoading = true;

        if (!string.IsNullOrEmpty(tempPdfPath) && !string.IsNullOrEmpty(tempPdfLanguage))
        {
            var moveResponse = await Http.PostAsJsonAsync("api/Media/movePdfs",
                new List<string> { tempPdfPath });
            if (moveResponse.IsSuccessStatusCode)
            {
                // Get the permanent path (all in the same folder)
                string permanentPath = "uploadedFiles/" + tempPdfPath;
                
                // Assign to the appropriate language field
                switch (tempPdfLanguage)
                {
                    case "English":
                        editingQuestion.pdfPathEN = permanentPath;
                        break;
                    case "Arabic":
                        editingQuestion.pdfPathAR = permanentPath;
                        break;
                    default: // Hebrew
                        editingQuestion.pdfPath = permanentPath;
                        break;
                }
            }
            else
            {
                var error = await moveResponse.Content.ReadAsStringAsync();
                Logger.LogError($"Failed to move PDF: {error}");
            }
        }
        
        // Rest of your existing SaveQuestion method
        if (editingQuestion.Id > 0)
        {
            // Update existing question
            var response = await Http.PutAsJsonAsync($"api/ChatAdmin/Question/{editingQuestion.Id}", editingQuestion);
            if (response.IsSuccessStatusCode)
            {
                if (questionsByCategory.TryGetValue(editingQuestion.categoryId, out var questions))
                {
                    var index = questions.FindIndex(q => q.Id == editingQuestion.Id);
                    if (index >= 0)
                    {
                        questions[index] = editingQuestion;
                    }
                }
            }
            else
            {
                Logger.LogError($"Failed to update question: {response.StatusCode}");
                await PopupService.ConfirmAsync(
                    "שגיאה בשמירה",
                    $"אירעה שגיאה בעת עדכון השאלה: {response.StatusCode}"
                );
                return;
            }
        }
        else
        {
            // Create new question
            var response = await Http.PostAsJsonAsync("api/ChatAdmin/Question", editingQuestion);
            if (response.IsSuccessStatusCode)
            {
                var result = await response.Content.ReadFromJsonAsync<Questions>();
                if (result != null)
                {
                    if (!questionsByCategory.ContainsKey(result.categoryId))
                    {
                        questionsByCategory[result.categoryId] = new List<Questions>();
                    }
                    questionsByCategory[editingQuestion.categoryId].Add(result);
                }
            }
            else
            {
                Logger.LogError($"Failed to create question: {response.StatusCode}");
                await PopupService.ConfirmAsync(
                    "שגיאה בשמירה",
                    $"אירעה שגיאה בעת יצירת השאלה: {response.StatusCode}"
                );
                return;
            }
        }
       
        // Clear temp variables
        tempPdfPath = null;
        tempPdfLanguage = null;
        
        showQuestionModal = false;
    } 
    catch (Exception ex)
    {
        Logger.LogError(ex, "Error saving question");
        // Show error message to user
        await PopupService.ConfirmAsync(
            "שגיאה בשמירה",
            $"אירעה שגיאה בעת שמירת השאלה: {ex.Message}"
        );
    }
    finally
    {
        isLoading = false;
    }
}
    private async Task DeleteQuestion(int questionId)
{
    var question = questionsByCategory[selectedCategoryId]?.FirstOrDefault(q => q.Id == questionId);
    if (question == null) return;

    isLoading = true;
    try
    {
        var response = await Http.DeleteAsync($"api/ChatAdmin/Question/{questionId}");
        if (response.IsSuccessStatusCode)
        {
            if (questionsByCategory.ContainsKey(selectedCategoryId))
            {
                questionsByCategory[selectedCategoryId].RemoveAll(q => q.Id == questionId);
            }
        }
        else
        {
            Logger.LogError($"Failed to delete question: {response.StatusCode}");
            string errorMessage = await response.Content.ReadAsStringAsync();
            try 
            {
                await PopupService.ConfirmAsync(
                    "שגיאה במחיקת שאלה", 
                    $"לא ניתן למחוק את השאלה. {errorMessage}"
                );
            }
            catch 
            {
                await JSRuntime.InvokeVoidAsync("alert", $"לא ניתן למחוק את השאלה. {errorMessage}");
            }
        }
    }
    catch (Exception ex)
    {
        Logger.LogError(ex, "Error deleting question");
        try 
        {
            await PopupService.ConfirmAsync(
                "שגיאה", 
                "אירעה שגיאה בעת ניסיון למחוק את השאלה. אנא נסה שוב מאוחר יותר."
            );
        }
        catch 
        {
            await JSRuntime.InvokeVoidAsync("alert", "אירעה שגיאה בעת ניסיון למחוק את השאלה. אנא נסה שוב מאוחר יותר.");
        }
    }
    finally
    {
        isLoading = false;
    }

}

    #endregion
}

<style>
    .admin-header {
        margin-bottom: 2rem;
        text-align: right;
    }

    .category-image-preview {
        position: relative;
        display: inline-block;
    }

    .category-image-preview img {
        width: 100px;
        height: 100px;
        object-fit: cover;
        border-radius: 8px;
    }

    .category-image-preview .btn {
        position: absolute;
        top: -8px;
        right: -8px;
        padding: 0.25rem 0.5rem;
        border-radius: 50%;
    }

    .pdf-upload-container {
        display: flex;
        flex-direction: column;
        gap: 1rem;
    }

    .existing-pdf {
        display: flex;
        flex-direction:column;
        align-items: center;
        gap: 1rem;
        padding: 0.75rem;
        background-color: var(--gray-light);
        border-radius: 8px;
    }

    .pdf-actions {
        display: flex;
        gap: 0.5rem;
        margin-left: auto;
        justify-content:center;
    }

    .temp-pdf-info {
        display: flex;
        align-items: center;
        gap: 0.5rem;
        padding: 0.5rem;
        background-color: var(--pink-light);
        border-radius: 8px;
    }
</style>