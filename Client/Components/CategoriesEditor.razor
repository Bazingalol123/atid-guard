@using AuthWithAdmin.Shared.ClientModels

<div class="categories-editor">
    <div class="table-responsive">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>תמונת הקטגוריה</th>
                    <th>שם הקטגוריה</th>
                    <th class="actions-desktop">עריכת קטגוריה</th>
                    <th class="actions-desktop">עריכת שאלות</th>
                    <th class="actions-desktop">מחיקה</th>
                    <th class="actions-mobile">פעולות</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var category in Categories)
                {
                    <tr>
                        <td>
                            <img src="@category.image" style="height: 3rem; width: 3rem;" />
                        </td>
                        <td>
                            @if (currentLanguage == "עברית")
                            {
                                @category.categoryName
                            }
                            else if (currentLanguage == "English")
                            {
                                @category.categoryNameEN
                            }
                            else if (currentLanguage == "Arabic")
                            {
                                @category.categoryNameAR
                            }
                        </td>

                        <!-- Desktop Buttons -->
                        <td class="actions-desktop">
                            <button class="btn btn-icon btn-edit" title="עריכה" @onclick="() => OnEditCategory.InvokeAsync(category)">
                                <i class="fas fa-edit"></i>
                            </button>
                        </td>
                        <td class="actions-desktop">
                            <button class="btn btn-icon btn-edit" title="שאלות" @onclick="() => OnSelectCategory.InvokeAsync(category.ID)">
                                <i class="fas fa-question-circle"></i>
                            </button>
                        </td>
                        <td class="actions-desktop">
                            <button class="btn btn-icon btn-danger" title="מחיקה" @onclick="() => OpenDeleteConfirmation(category)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </td>

                        <!-- Mobile Dropdown -->
                        <td class="actions-mobile">
                            <div class="dropdown">
                                <button class="btn btn-icon dropdown-toggle" @onclick="() => ToggleDropdown(category.ID)">
                                    <i class="fas fa-ellipsis-v"></i>
                                </button>
                                @if (dropdownVisibleFor == category.ID)
                                {
                                    <ul class="dropdown-menu show">
                                        <li>
                                            <button class="dropdown-item" @onclick="() => { OnEditCategory.InvokeAsync(category); dropdownVisibleFor = null; }">
                                                <i class="fas fa-edit me-2"></i> עריכה
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item" @onclick="() => { OnSelectCategory.InvokeAsync(category.ID); dropdownVisibleFor = null; }">
                                                <i class="fas fa-question-circle me-2"></i> שאלות
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item text-danger" @onclick="() => { OpenDeleteConfirmation(category); dropdownVisibleFor = null; }">
                                                <i class="fas fa-trash-alt me-2"></i> מחיקה
                                            </button>
                                        </li>

                                    </ul>
                                }
                            </div>
                        </td>
                    </tr>
                }
            </tbody>

        </table>
    </div>
</div>

<ConfirmationPopup @ref="deleteConfirmation"
                   Title="מחיקת קטגוריה"
                   ConfirmText="מחיקה"
                   CancelText="ביטול"
                   ConfirmButtonClass="btn-danger"
                   OnConfirm="ConfirmDeleteCategory">
    <p>האם ברצונך למחוק את הקטגוריה הזו?</p>
    <blockquote class="question-preview">
        @categoryToDelete?.categoryName
    </blockquote>
    <p><strong>לא ניתן יהיה לשחזר את הקטגוריה לאחר המחיקה.</strong></p>
</ConfirmationPopup>

<style>
    .btn-icon {
        background: none;
        border: none;
        padding: 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        width: 2.5rem;
        height: 2.5rem;
        margin: 0 auto;
    }

   
        .btn-icon:hover {
            transform: translateY(-2px);
        }

        .btn-icon:active {
            transform: translateY(0);
        }

        .btn-icon i {
            font-size: 1rem;
        }
    .btn-edit {
       color: #55595C;
    }

        .btn-edit:hover {
        color: #55594E;
            background-color: rgba(128, 128, 128, 0.1);
    }

    .btn-info {
        color: #55595C;
    }

        .btn-info:hover, .btn-info:active {
            color: #55594E;
            background-color: rgba(128, 128, 128, 0.1);
        }

    .btn-danger {
        color: #e74c3c;
    }

        .btn-danger:hover {
            color: #c0392b;
            background-color: rgba(231, 76, 60, 0.1);
        }

    .empty-state {
        padding: 2rem;
        color: #6c757d;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

        .empty-state p {
            margin: 0;
        }

    .table {
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

        .table th {
            border: none;
            color: #495057;
            font-weight: 600;
            padding: 1rem;
            text-align: center;
            width:3rem;
        }

        .table td {
            border: none;
            background-color: white;
            padding: 1rem;
            vertical-align: middle;
            text-align: center;
        }

        .table tr {
            transition: all 0.2s ease;
        }

            .table tr:hover td {
                background-color: #FAE2EF;
                

            }

            .dropdown-item{
                color:#55595C
            }

    .question-preview {
        background-color: #f8f9fa;
        border-right: 4px solid #316197;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 4px;
        font-style: italic;
    }
</style>

@code {
    [Parameter]
    public string currentLanguage { get; set; } = "";

    [Parameter]
    public List<Categories> Categories { get; set; } = new List<Categories>();

    [Parameter]
    public EventCallback<Categories> OnEditCategory { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteCategory { get; set; }

    [Parameter]
    public EventCallback<int> OnSelectCategory { get; set; }

    private ConfirmationPopup deleteConfirmation;
    private Categories categoryToDelete;
    private int? dropdownVisibleFor = null;

    private void ToggleDropdown(int categoryId)
    {
        if (dropdownVisibleFor == categoryId)
            dropdownVisibleFor = null;
        else
            dropdownVisibleFor = categoryId;
    }

    private void OpenDeleteConfirmation(Categories category)
    {
        categoryToDelete = category;
        deleteConfirmation.Show();
    }

    private async Task ConfirmDeleteCategory()
    {
        if (categoryToDelete != null)
        {
            await OnDeleteCategory.InvokeAsync(categoryToDelete.ID);
        }
    }
}