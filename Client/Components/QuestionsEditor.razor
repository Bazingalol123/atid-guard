@using AuthWithAdmin.Client.ClientHelpers
@using AuthWithAdmin.Shared.ClientModels



<div class="questions-editor">
    <div class="table-responsive d-none d-md-block">
        <table class="table table-hover">
            <thead>
                <tr>
                    <th>שאלה</th>
                    <th>תשובה</th>
                    <th>מה נעשה בפועל?</th>
                    <th>PDF</th>
                    <th>פעולות</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var question in Questions)
                {
                    <tr>
                        <td>@GetLocalizedText(question.questionText, question.questionTextEN, question.questionTextAR)</td>
                        <td>@Truncate(GetLocalizedText(question.answerText, question.answerTextEN, question.answerTextAR))</td>
                        <td>@Truncate(GetLocalizedText(question.nextStep, question.nextStepEN, question.nextStepAR))</td>
                        <td>
                            @if (!string.IsNullOrEmpty(GetPdfPath(question)))
                            {
                                <i class="fas fa-file-pdf btn-edit"></i>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                        </td>
                        <td>
                            <div class="action-buttons">
                                <button class="btn btn-icon btn-edit" title="עריכה" @onclick="() => OnEditQuestion.InvokeAsync(question)">
                                    <i class="fas fa-edit"></i>
                                </button>
                                <button class="btn btn-icon btn-danger" title="מחיקה" @onclick="() => OpenDeleteConfirmation(question)">
                                    <i class="fas fa-trash-alt"></i>
                                </button>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </div>

    <!-- Mobile version: Expandable cards -->
    <div class="mobile-question-cards d-md-none">
        @foreach (var question in Questions)
        {
            <div class="question-card">
                <div class="card-header" @onclick="@(() => ToggleCard(question))">
                    <span>@GetLocalizedText(question.questionText, question.questionTextEN, question.questionTextAR)</span>
                    <i class="fas @(expandedCards.Contains(question.Id) ? "fa-chevron-up" : "fa-chevron-down") toggle-icon"></i>
                </div>
                @if (expandedCards.Contains(question.Id))
                {
                    <div class="card-body">
                        <p><strong>תשובה:</strong> 
                        <br />
                            @GetLocalizedText(question.answerText, question.answerTextEN, question.answerTextAR)</p>
                        <p><strong>מה נעשה בפועל?</strong>
                            <br />
                            @((MarkupString)FormatMessageWithLineBreaks(GetLocalizedText(question.nextStep, question.nextStepEN, question.nextStepAR)))
                        </p>
                        <div class="action-buttons">
                            @if (!string.IsNullOrEmpty(GetPdfPath(question)))
                            {
                                <i class="fas fa-file-pdf btn-icon btn-edit"></i>
                            }
                            else
                            {
                                <span class="text-muted">-</span>
                            }
                            <button class="btn btn-icon btn-edit" title="עריכה" @onclick="() => OnEditQuestion.InvokeAsync(question)">
                                <i class="fas fa-edit"></i>
                            </button>
                            <button class="btn btn-icon btn-danger" title="מחיקה" @onclick="() => OpenDeleteConfirmation(question)">
                                <i class="fas fa-trash-alt"></i>
                            </button>
                        </div>
                    </div>
                }
            </div>
        }
    </div>
</div>

<style>
    .action-buttons {
        display: flex;
        gap: 12px;
    }

    .btn-icon {
        background: none;
        border: none;
        padding: 8px;
        border-radius: 4px;
        cursor: pointer;
        transition: all 0.2s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        color:black;
    }

        .btn-icon:hover {
            transform: translateY(-2px);
        }

        .btn-icon:active {
            transform: translateY(0);
        }

    .btn-edit {
        color: #55595C;
    }

        .btn-edit:hover {
            color: #55594E;
            background-color: rgba(128, 128, 128, 0.1);
        }


    .btn-info {
        color: #55595C;
    }

        .btn-info:hover {
            color: #55594E;
            background-color: rgba(128, 128, 128, 0.1);
        }

    .btn-danger {
        color: #e74c3c;
    }

        .btn-danger:hover {
            color: #c0392b;
            background-color: rgba(231, 76, 60, 0.1);
        }

    .fas {
        font-size: 16px;
    }
</style>
<ConfirmationPopup @ref="deleteConfirmation"
                  Title="מחיקת שאלה"
                  ConfirmText="מחיקה"
                  CancelText="ביטול"
                  ConfirmButtonClass="btn-danger"
                  OnConfirm="ConfirmDeleteQuestion">
    <p>האם ברצונך למחוק את השאלה הזו?</p>
    <blockquote class="question-preview">
        @questionToDelete?.questionText
    </blockquote>
    <p><strong>לא ניתן יהיה לשחזר את השאלה לאחר המחיקה.</strong></p>
</ConfirmationPopup>

<style>
    .action-buttons {
        display: flex;
        gap: 0.5rem;
        justify-content: flex-end;
    }

    .btn-icon {
        width: 2.5rem;
        height: 2.5rem;
        padding: 0;
        display: flex;
        align-items: center;
        justify-content: center;
        border-radius: 8px;
        transition: all 0.2s ease;
    }

    .btn-icon i {
        font-size: 1rem;
    }

    .btn-icon:hover {
        transform: translateY(-2px);
    }

    .empty-state {
        padding: 2rem;
        color: #6c757d;
        display: flex;
        flex-direction: column;
        align-items: center;
        gap: 0.5rem;
    }

    .empty-state p {
        margin: 0;
    }

    .badge {
        font-size: 0.875rem;
        padding: 0.5rem 0.75rem;
        border-radius: 6px;
    }

    .table {
        margin-bottom: 0;
        border-collapse: separate;
        border-spacing: 0 0.5rem;
    }

    .table th {
        border: none;
        color: #495057;
        font-weight: 600;
        padding: 1rem;
        text-align: center; /* Add this line to center the headers */
    }
    .table td {
        border: none;
        background-color: white;
        padding: 1rem;
        vertical-align: middle;
    }

    .table tr {
        transition: all 0.2s ease;
    }

    .table tr:hover td {
        background-color: var(--pink-light);
    }
    
    .question-preview {
        background-color: #f8f9fa;
        border-right: 4px solid #316197;
        padding: 1rem;
        margin: 1rem 0;
        border-radius: 4px;
        font-style: italic;
    }


</style>

@code {
    [Parameter]
    public string currentLanguage { get; set; } = "";


    [Parameter]
    public int CategoryId { get; set; }

    [Parameter]
    public List<Questions> Questions { get; set; } = new List<Questions>();

    [Parameter]
    public EventCallback<Questions> OnEditQuestion { get; set; }

    [Parameter]
    public EventCallback<int> OnDeleteQuestion { get; set; }
    
    private ConfirmationPopup deleteConfirmation;
    private Questions questionToDelete;
    
    private void OpenDeleteConfirmation(Questions question)
    {
        questionToDelete = question;
        deleteConfirmation.Show();
    }
    
    private async Task ConfirmDeleteQuestion()
    {
        if (questionToDelete != null)
        {
            await OnDeleteQuestion.InvokeAsync(questionToDelete.Id);
        }
    }

    private HashSet<int> expandedCards = new();

    private void ToggleCard(Questions question)
    {
        if (expandedCards.Contains(question.Id))
            expandedCards.Remove(question.Id);
        else
            expandedCards.Add(question.Id);
    }

    private string GetLocalizedText(string he, string en, string ar)
    {
        return currentLanguage switch
        {
            "English" => string.IsNullOrEmpty(en) ? he : en,
            "Arabic" => string.IsNullOrEmpty(ar) ? he : ar,
            _ => he
        };
    }

    private string Truncate(string text, int max = 100) =>
        string.IsNullOrEmpty(text) ? "" : text.Length > max ? text.Substring(0, max) + "..." : text;

    private string GetPdfPath(Questions q) =>
        currentLanguage switch
        {
            "English" => !string.IsNullOrEmpty(q.pdfPathEN) ? q.pdfPathEN : null,
            "Arabic" => !string.IsNullOrEmpty(q.pdfPathAR) ? q.pdfPathAR : null,
            _ => q.pdfPath
        };

    private string FormatMessageWithLineBreaks(string content)
    {
        if (string.IsNullOrEmpty(content))
            return content;

        // Replace all types of line breaks with <br> tags
        // This handles both Windows (\r\n) and Unix (\n) style line breaks
        return content.Replace("\r\n", "<br>").Replace("\n", "<br>");
    }

}